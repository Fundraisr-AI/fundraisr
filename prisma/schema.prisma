generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?  @db.Text
  id_token          String?  @db.Text
  session_state     String?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole      @default(USER)
  plan          String?       @default("FREE")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  details       UserDetails?
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model UserDetails {
  id          String      @id @default(uuid())
  companyName String?
  smartLeadsId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])

  campaigns   Campaign[]
}

model Campaign {
  id            String      @id @default(uuid())
  name          String
  status        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  smartLeadsId    String    @default("")

  userDetailsId String
  userDetails   UserDetails @relation(fields: [userDetailsId], references: [id])

  leads         Lead[]
}

model Lead {
  id              String      @id @default(uuid())
  firstname       String
  lastname       String
  email           String
  status          LeadStatus  @default(NO_COMMENTS)
  is_replied      Boolean     @default(false)
  is_unsubscribed Boolean     @default(false)
  is_bounced      Boolean     @default(false)
  smartLeadsId    String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  campaignId      String
  campaign        Campaign    @relation(fields: [campaignId], references: [id])
}

enum LeadStatus {
  NO_COMMENTS
  INTERESTED
  MEETING_REQUESTED
  NOT_INTERESTED
  DO_NOT_CONTACT
  INFORMATION_REQUEST
  OUT_OF_OFFICE
  WRONG_PERSON
  VC_MANUAL_APPLICATION
  MEETING_BOOKED
}
