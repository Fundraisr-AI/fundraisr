generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole     @default(USER)
  plan          String?      @default("FREE")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  details       UserDetails?
  documents     Documents[]

}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model UserDetails {
  id           String     @id @default(uuid())
  companyName  String?
  smartLeadsId String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String     @unique
  fundraisingTarget Int @default(0)
  capitalCommitted Int @default(0)
  campaigns    Campaign[]
  user         User       @relation(fields: [userId], references: [id])
}

model Campaign {
  id            String      @id @default(uuid())
  name          String
  status        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  smartLeadsId  String      @default("")
  userDetailsId String
  copy          String?
  geography     String?
  leadList      String?
  investor      String?     @db.VarChar(255)
  userDetails   UserDetails @relation(fields: [userDetailsId], references: [id])
  leads         Lead[]
}

model Lead {
  id              String           @id @default(uuid())
  firstname       String
  lastname        String
  email           String
  status          LeadStatus       @default(NO_COMMENTS)
  is_replied      Boolean          @default(false)
  is_unsubscribed Boolean          @default(false)
  is_bounced      Boolean          @default(false)
  smartLeadsId    String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  campaignId      String
  companyName     String?
  phoneNumber     String?
  campaign        Campaign         @relation(fields: [campaignId], references: [id])
  capitalCommitted  String?
  messages        MessageHistory[]
}

model MessageHistory {
  id               String   @id @default(uuid())
  from             String
  to               String
  type             String
  smartLeadsId     String
  time             DateTime
  email_body       String
  subject          String
  email_seq_number String
  open_count       Int
  click_count      Int
  leadId           String
  lead             Lead     @relation(fields: [leadId], references: [id])
}

model Documents {
  id              String   @id @default(uuid())
  documentUrl     String
  fileName        String?   @unique
  size            String    
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

enum LeadStatus {
  NO_COMMENTS
  INTERESTED
  MEETING_REQUESTED
  NOT_INTERESTED
  DO_NOT_CONTACT
  INFORMATION_REQUEST
  OUT_OF_OFFICE
  WRONG_PERSON
  VC_MANUAL_APPLICATION
  MEETING_BOOKED
}
